config {
  type: "view",
  schema: "query"
}

WITH
  person_in_pipedrive_raw AS (
    SELECT 
      customer_id
      ,email
      ,LAST_VALUE(name IGNORE NULLS) OVER (PARTITION BY name ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS name
      ,LAST_VALUE(phone IGNORE NULLS) OVER (PARTITION BY phone ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS phone
      ,LAST_VALUE(person_id IGNORE NULLS) OVER (PARTITION BY person_id ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS person_id
      ,LAST_VALUE(org_id IGNORE NULLS) OVER (PARTITION BY org_id ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS org_id
      ,LAST_VALUE(birthday IGNORE NULLS) OVER (PARTITION BY birthday ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS birthday
      ,LAST_VALUE(create_date IGNORE NULLS) OVER (PARTITION BY create_date ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS create_date
      ,LAST_VALUE(last_activity_date IGNORE NULLS) OVER (PARTITION BY last_activity_date ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_activity_date
      ,LAST_VALUE(position IGNORE NULLS) OVER (PARTITION BY position ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS position
      ,LAST_VALUE(title IGNORE NULLS) OVER (PARTITION BY title ORDER BY last_update ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS title
      ,ROW_NUMBER() OVER (PARTITION BY email ORDER BY last_update DESC) AS rn
      ,last_update
    FROM ${ref('raw_customer_person')}
  ),

  customer_in_pipedrive_raw AS (
    SELECT DISTINCT customer_id,name,email,phone,title,person_id,org_id,birthday,create_date,last_activity_date,position, max(last_update) last_update
    FROM person_in_pipedrive_raw
    WHERE rn = 1
    GROUP BY customer_id,name,email,phone,title,person_id,org_id,birthday,create_date,last_activity_date,position
  ), 

  customer_in_lead_raw AS (
    SELECT 
      customer_id
      ,email
      ,LAST_VALUE(name IGNORE NULLS) OVER (PARTITION BY name ORDER BY create_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS name
      ,LAST_VALUE(phone IGNORE NULLS) OVER (PARTITION BY phone ORDER BY create_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS phone
      ,LAST_VALUE(title IGNORE NULLS) OVER (PARTITION BY title ORDER BY create_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS title
      ,ROW_NUMBER() OVER (PARTITION BY email ORDER BY create_date DESC) AS rn
      ,create_date
    FROM ${ref('raw_lead')}
  ),

  customer_in_lead AS (
    SELECT DISTINCT customer_id,name,email,phone,title, max(create_date) create_date
    FROM customer_in_lead_raw
    WHERE rn = 1
    GROUP BY customer_id,name,email,phone,title
  ),

  customer_raw AS (
    -- Bước 1: Lấy tất cả dữ liệu từ customer_in_pipedrive_raw mà không có trong customer_in_lead
    SELECT
        p.customer_id,
        COALESCE(NULLIF(TRIM(p.name), ''), NULLIF(TRIM(l.name), '')) AS name,
        NULLIF(TRIM(p.email), '') AS email,
        COALESCE(NULLIF(TRIM(l.phone), ''), NULLIF(TRIM(p.phone), '')) AS phone,
        p.birthday AS birthday,
        COALESCE(NULLIF(TRIM(p.title), ''), NULLIF(TRIM(l.title), '')) AS title,
        NULLIF(TRIM(p.position), '') AS position,
        p.last_update,
        p.create_date,
        p.last_activity_date,
        p.person_id,
        p.org_id,
        1 AS status -- Đã có trong customer_in_pipedrive_raw nên status = 1
    FROM customer_in_pipedrive_raw p
    LEFT JOIN customer_in_lead l ON p.customer_id = l.customer_id
    WHERE l.customer_id IS NULL

    UNION ALL

    -- Bước 2: Lấy tất cả dữ liệu từ customer_in_lead và dữ liệu tương ứng từ customer_in_pipedrive_raw
    SELECT
        l.customer_id AS customer_id,
        COALESCE(NULLIF(TRIM(p.name), ''), NULLIF(TRIM(l.name), '')) AS name,
        NULLIF(TRIM(l.email), '') AS email,
        COALESCE(NULLIF(TRIM(l.phone), ''), NULLIF(TRIM(p.phone), '')) AS phone,
        p.birthday AS birthday,
        COALESCE(NULLIF(TRIM(p.title), ''), NULLIF(TRIM(l.title), '')) AS title,
        NULLIF(TRIM(p.position), '') AS position,
        p.last_update,
        COALESCE(p.create_date, l.create_date) AS create_date,
        p.last_activity_date,
        p.person_id,
        p.org_id,
        CASE 
            WHEN p.customer_id IS NOT NULL THEN 1
            ELSE 0 
        END AS status
    FROM customer_in_lead l
    LEFT JOIN customer_in_pipedrive_raw p ON l.customer_id = p.customer_id
  ),

  customer AS (
    SELECT
      customer_id
      ,email
      ,name
      ,phone
      ,person_id
      ,org_id
      ,birthday
      ,create_date
      ,last_activity_date
      ,position
      ,title
      ,last_update
      ,status
    FROM `base-data-analyst.marketing.customer`
  )


-- SELECT
--   COALESCE(customer_raw.customer_id, customer.customer_id) as customer_id
--   ,COALESCE(customer_raw.email, customer.email) as email
--   ,COALESCE(customer_raw.name, customer.name) as name
--   ,COALESCE(customer_raw.phone, customer.phone) as phone
--   ,COALESCE(customer_raw.person_id, customer.person_id) as person_id
--   ,COALESCE(customer_raw.org_id, customer.org_id) as org_id
--   ,COALESCE(customer_raw.birthday, customer.birthday) as birthday
--   ,COALESCE(customer_raw.create_date, customer.create_date) as create_date
--   ,COALESCE(customer_raw.last_activity_date, customer.last_activity_date) as last_activity_date
--   ,COALESCE(customer_raw.position, customer.position) as position
--   ,COALESCE(customer_raw.title, customer.title) as title
--   ,COALESCE(customer_raw.last_update, customer.last_update) as last_update
--   ,customer_raw.status
-- FROM customer_raw
-- FULL OUTER JOIN
--   customer ON customer_raw.customer_id = customer.customer_id

SELECT
    c.customer_id,
    COALESCE(NULLIF(TRIM(c.name), ''), NULLIF(TRIM(cr.name), '')) AS name,
    NULLIF(TRIM(c.email), '') AS email,
    COALESCE(NULLIF(TRIM(cr.phone), ''), NULLIF(TRIM(c.phone), '')) AS phone,
    c.birthday AS birthday,
    COALESCE(NULLIF(TRIM(c.title), ''), NULLIF(TRIM(cr.title), '')) AS title,
    NULLIF(TRIM(c.position), '') AS position,
    c.last_update,
    c.create_date,
    c.last_activity_date,
    c.person_id,
    c.org_id,
    case when c.status = 0 and cr.status = 1 then 1 else 0 end AS status
FROM customer c
LEFT JOIN customer_raw cr ON c.customer_id = cr.customer_id
WHERE cr.customer_id IS NULL

UNION ALL

SELECT
    cr.customer_id AS customer_id,
    COALESCE(NULLIF(TRIM(c.name), ''), NULLIF(TRIM(cr.name), '')) AS name,
    NULLIF(TRIM(cr.email), '') AS email,
    COALESCE(NULLIF(TRIM(cr.phone), ''), NULLIF(TRIM(c.phone), '')) AS phone,
    c.birthday AS birthday,
    COALESCE(NULLIF(TRIM(c.title), ''), NULLIF(TRIM(cr.title), '')) AS title,
    NULLIF(TRIM(c.position), '') AS position,
    c.last_update,
    COALESCE(c.create_date, cr.create_date) AS create_date,
    c.last_activity_date,
    c.person_id,
    c.org_id,
    case when c.status = 0 and cr.status = 1 then 1 else 0 end AS status
FROM customer_raw cr
LEFT JOIN customer c ON cr.customer_id = c.customer_id









